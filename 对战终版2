#include"DataStruct.h"
#include "math.h"

#include <ctime>
#include <cstdlib>
#include <iostream>
#include <windows.h>
#include <const.h>

#define PI 3.1415926
#define UNUSED(x) (void)x;
#define random(x) rand() % (x)
#define SIGN(x) ((x < 0 ) ? 1 : 0 )

//产生超时故障
void pvp_ai2_timeoutFault()
{
    Sleep(1000);
}

//产生崩溃故障
void pvp_ai2_crashFault()
{
    exit(0);
}

//随机生成故障
void pvp_ai2_randGenFault()
{
    //创建静态初始化标志
    static bool initFlag = false;
    //产生随机数种子
    if (!initFlag)
    {
        srand((int)time(NULL));
        initFlag = true;
    }
    //随机生成故障
    switch (random(3)) {
    case 0:
        pvp_ai2_timeoutFault();
    case 1:
        pvp_ai2_crashFault();
    }
}

//角度坐标系转换，转变坐标系
inline double pvp_ai2_angleConver(double angle)
{
    return -90 - angle;
}

//抽取向量点乘
inline double pvp_ai2_vecMul(double x0, double y0, double x1, double y1)
{
    return x0 * x1 + y0 * y1;
}

//抽取向量取模
inline double pvp_ai2_vecMod(double x, double y)
{
    return sqrt(x * x + y * y);
}


/* 尝试预测小球位置 （参考BallStruct）
 * 参数：ball：小球数据，x、y：小球当前位置，v_x 、v_y：小球当前速度，time：给定时间
 * 返回值：0：预测成功，-1：预测失败
 */
int pvp_ai2_preBallPos(BallStruct &ball, int time, float &x, float &y)
{
    double v_x0, v_y0;
    double v_x1, v_y1;
    double a_x, a_y;
    //获取初速度
    v_x0 = ball.v_x;
    v_y0 = ball.v_y;
    //无速度则无需预测
    if (v_x0 == 0 && v_y0 == 0)
    {
        x = ball.x;
        y = ball.y;
        return 0;
    }
    //计算加速度
    a_x = -v_x0 / pvp_ai2_vecMod(v_x0, v_y0) * 4000;
    a_y = -v_y0 / pvp_ai2_vecMod(v_x0, v_y0) * 4000;
    //计算末速度
    v_x1 = v_x0 + a_x * time / 100;
    if (SIGN(v_x1) != SIGN(v_x0))
    {
        v_x1 = 0;
    }
    v_y1 = v_y0 + a_y * time / 100;
    if (SIGN(v_y1) != SIGN(v_y0))
    {
        v_y1 = 0;
    }
    //计算小球即将出现的位置
    x = ball.x + (v_x1 * v_x1 - v_x0 * v_x0) / 2 / a_x;
    y = ball.y + (v_y1 * v_y1 - v_y0 * v_y0) / 2 / a_y;
    return 0;
}


/* 瞄准某个球
 * 参数：data：游戏数据，ball_x、ball_y：球当前位置，ball_v_x、ball_v_y：球当前速度，leftward、rightward：返回动作
 * 返回值：0：瞄准成功，-1：瞄准失败
 */
int pvp_ai2_AimBall(DataStruct *data, BallStruct &ball, int &leftward, int &rightward)
{
   //小球当前位置
    float ball_x = ball.x;
    float ball_y = ball.y;
   //小球当前速度
    float ball_v_x = ball.v_x;
    float ball_v_y = ball.v_y;

    //预测小球的轨迹
    pvp_ai2_preBallPos(ball, 2500, ball_x, ball_y);
    double angleTo;
    double angleDiff;

    //球运动方向和飞机与球位置向量的夹角余弦
    double cosPosV;
    double cos_c;
    double angle_need;
    double a;
    double b;
    double c;
    //两向量点乘除以两向量的模
    cosPosV = pvp_ai2_vecMul(ball_v_x, ball_v_y, data->plane2.x - ball_x, data->plane2.y - ball_y)
            / pvp_ai2_vecMod(ball_v_x, ball_v_y) / pvp_ai2_vecMod(data->plane2.x - ball_x, data->plane2.y - ball_y);

    //尝试飞机转向
    b=sqrt((ball_y - data->plane2.y)*(ball_y - data->plane2.y)+(ball_x - data->plane2.x)*(ball_x - data->plane2.x));
    angle_need=PI-asin(sqrt(1 - cosPosV * cosPosV) * pvp_ai2_vecMod(ball_v_x, ball_v_y) / 2000) - acos(cosPosV);
    double s=sqrt(1 - cosPosV * cosPosV) * pvp_ai2_vecMod(ball_v_x, ball_v_y) / 2000/sin(angle_need)*b;
    c=s+pvp_ai2_vecMod(ball.v_x,ball.v_y)*asin(sqrt(1 - cosPosV * cosPosV) * pvp_ai2_vecMod(ball_v_x, ball_v_y) / 2000)/2/PI;
    a=sqrt(b*b+c*c-2*b*c*cosPosV);
    cos_c=(a*a+b*b-c*c)/2/a/b;
    angleTo=pvp_ai2_angleConver((acos(cos_c)+atan2(ball_y - data->plane2.y, ball_x - data->plane2.x))*180/PI);
   //根据正弦定理（a/sinA=b/sinB）求出sin值再求得所需度数
   // angleTo=90-angle_need;
   //计算飞机朝向与该角度之差
    angleDiff=fmod(fmod(data->plane2.angle-angleTo,360)+360,360);

    //根据角度差选择更优旋转方向
    //if (angleDiff < 3.6 || angleDiff > 356.4)
    if (angleDiff < 1.8 || angleDiff > 358.2)
   {
        return 1;
    }
    else if (angleDiff < 180)
    {
        leftward = false;
        rightward = true;
    }
    else
    {
        leftward = true;
        rightward = false;
    }

    return 0;
}


/* 预测飞机位置
 * 参数：data：游戏数据，x、y：返回位置，time：给定时间
 * 返回值：0：预测成功，-1：预测失败
 */
int pvp_ai2_prePlanePos(DataStruct *data, int time, float &x, float &y)
{
    double v_x0, v_y0, v_x1, v_y1, a_x, a_y;
    //获取初速度
    v_x0 = data->plane2.v_x;
    v_y0 = data->plane2.v_y;
    //无速度则无需预测
    if (v_x0 == 0 && v_y0 == 0)
    {
        x = data->plane2.x;
        y = data->plane2.y;
        return 0;
    }
    //计算加速度
    a_x = -v_x0 / pvp_ai2_vecMod(v_x0, v_y0) * 4000;
    a_y = -v_y0 / pvp_ai2_vecMod(v_x0, v_y0) * 4000;
    //计算末速度
    v_x1 = v_x0 + a_x * time / 100;
    if (SIGN(v_x1) != SIGN(v_x0))
    {
        v_x1 = 0;
    }
    v_y1 = v_y0 + a_y * time / 100;
    if (SIGN(v_y1) != SIGN(v_y0))
    {
        v_y1 = 0;
    }
    //计算位置
    x = data->plane2.x + (v_x1 * v_x1 - v_x0 * v_x0) / 2 / a_x;
    y = data->plane2.y + (v_y1 * v_y1 - v_y0 * v_y0) / 2 / a_y;
    return 0;
}

/*
//筛选距离最近的小球
int pvp_ai2_selectBall(DataStruct *data){
    double dis = INT_MAX, disc;
    double xdiff;
    double ydiff;
    int index=0;
    for (int i = 0; i < data->ball_size; i++)
    {
        //获取当前球的引用
        BallStruct &ball = data->ball[i];
        ydiff=data->plane2.y-ball.y;
        xdiff=data->plane2.x-ball.x;
        disc=sqrt( xdiff *  xdiff + ydiff * ydiff);
        if(disc<dis){
            index=i;
            dis=disc;
        }
    }
    return index;
}
*/

int pvp_ai2_selectBall(DataStruct *data){
    int rMax=-1;
    int index=0;
    double dis=INT_MAX;
    for(int i=0;i<data->ball_size;i++){
        BallStruct &ball = data->ball[i];
        if(ball.r>rMax){
            rMax=ball.r;
            index=i;
            double y=data->plane2.y-ball.y;
            double x=data->plane2.x-ball.x;
            dis=pvp_ai2_vecMod(x,y);
        }else if(ball.r==rMax){
            double y=data->plane2.y-ball.y;
            double x=data->plane2.x-ball.x;
            double disc=pvp_ai2_vecMod(x,y);
            if(disc<dis){
                index=i;
                dis = disc;
            }
        }
    }
    return index;
}

/* 转向某点
 * 参数：data：游戏数据，x、y：目标点，leftward、rightward：返回动作
 * 返回值：0：正在转向，1：完成转向，-1：转向失败
 */
int pvp_ai2_turnTo(DataStruct *data, float x, float y, int &leftward, int &rightward)
{
    //飞机到目的地的角度
    double angleTo, angleDiff;

    //计算飞机到目的地的角度并改变坐标系
    angleTo = pvp_ai2_angleConver(atan2(y - data->plane2.y, x - data->plane2.x) * 180 / PI);
    //计算飞机朝向与该角度之差
    angleDiff = fmod(fmod(data->plane2.angle - angleTo, 360) + 360, 360);

    //根据角度差选择更优旋转方向
    if (angleDiff < 1.8 || angleDiff > 358.2)
    {
        return 1;
    }
    else if (angleDiff < 180)
    {
        leftward = false;
        rightward = true;
    }
    else
    {
        leftward = true;
        rightward = false;
    }

    return 0;
}

/* 移动至某点
 * 参数：data：游戏数据，x、y：目标点，forward、leftward、rightward：返回动作
 * 返回值：0：正在移动，1：完成移动，-1：移动失败
 */
int pvp_ai2_moveTo(DataStruct *data, float x, float y, int &forward, int &leftward, int &rightward, int precision = 1)
{
    //计算当前点到终点距离
    double dis = pvp_ai2_vecMod(y - data->plane2.y, x - data->plane2.x);
    //已到达目标点则终止动作
    if (dis < precision)
    {
        return 1;
    }

    //预测飞机位置
    float pre_x, pre_y;
    pvp_ai2_prePlanePos(data, 3000, pre_x, pre_y);

    //正在转向则不加速
    if (!pvp_ai2_turnTo(data, data->plane2.x + x - pre_x, data->plane2.y + y - pre_y, leftward, rightward))
    {
        forward = false;
        return 0;
    }

    dis = pvp_ai2_vecMod(y - pre_x, x - pre_y);
    //停下时未到达目标点
    if (dis >= precision)
    {
        forward = true;
        leftward = false;
        rightward = false;
    }

    return 0;
}

/* 判断是否需要移动（正在移动的小球）
 * 参数：data：游戏数据、des_x：目标点横坐标、des_y：目标点纵坐标
 * 返回值：0：无需移动，1：需要移动
 */
int pvp_ai2_moveNeeded(DataStruct *data, int &des_x, int &des_y, int preTime = 200)
{
    float min_t = INT_MAX;
    //预测每一个球的移动
    for (int i = 0; i < data->ball_size; i++)
    {
        //获取当前球的引用
        BallStruct &ball = data->ball[i];
        //获取当前球的坐标和速度
        float ball_x = ball.x, ball_y = ball.y, ball_v_x = ball.v_x, ball_v_y = ball.v_y;

        //计算球运动直线方程
        float A, B, C;
        A = -1;
        B = ball_v_y / ball_v_x;
        C = ball_y - ball_x * ball_v_y / ball_v_x;
        //计算飞机到直线距离
        float dis = fabs((A * data->plane2.y + B * data->plane2.x + C) / pvp_ai2_vecMod(A, B));
        //计算垂点坐标
        float cross_x = (data->plane2.y - ball_y + ball_v_y / ball_v_x * ball_x + ball_v_x / ball_v_y * data->plane2.x)
                / (ball_v_x / ball_v_y + ball_v_y / ball_v_x);
        float cross_y = (ball_v_y / ball_v_x) * (cross_x - ball_x) + ball_y;
        //计算到垂点的时间
        float t = (cross_x - ball_x) / ball_v_x * 100;
        //反向运动或时间过久则忽略该球
        if (t < 0 || t > preTime)
        {
            continue;
        }
        //判断该球是否有威胁
        if (dis < data->plane2.r + ball.r + 10 && t < min_t)
        {
            //设置最紧迫威胁
            min_t = t;

            //向相反方向移动球半径的距离
            des_x = data->plane2.x +  ball.r * (data->plane2.x - cross_x)
                    / pvp_ai2_vecMod(data->plane2.x - cross_x, data->plane2.y - cross_y);
            des_y = data->plane2.y +  ball.r * (data->plane2.y - cross_y)
                    / pvp_ai2_vecMod(data->plane2.x - cross_x, data->plane2.y - cross_y);

            //如果x越界
            if (des_x < data->plane2.r || des_x > 2000 - data->plane2.r)
            {
                des_x = data->plane2.x;
                if (data->plane2.y - cross_y > 0)
                    des_y = cross_y + ball.r + data->plane2.r;
                else
                    des_y = cross_y - ball.r - data->plane2.r;
            }
            //如果y越界
            if (des_y < data->plane2.r || des_y > 1500 - data->plane2.r)
            {
                des_y = data->plane2.y;
                if (data->plane2.x - cross_x > 0)
                    des_x = cross_x + ball.r + data->plane2.r;
                else
                    des_x = cross_x - ball.r - data->plane2.r;
            }
        }
    }

    if (min_t != INT_MAX)
    {
        return 1;
    }

    //给定时间内无危险
    return 0;
}

/* 判断护盾使用情况
 * 返回值：1：需要开启 0：无需开启
 * 通过判断飞机到小球路线的时间或是距离
 */
int pvp_ai2_shieldUse(DataStruct *data , int &des_x, int &des_y, int preTime = 200)
{

    float min_t = INT_MAX;
    //预测每一个球的移动
    for (int i = 0; i < data->ball_size; i++)
    {
        //获取当前球的引用
        BallStruct &ball = data->ball[i];
        //获取当前球的坐标和速度
        float ball_x = ball.x, ball_y = ball.y, ball_v_x = ball.v_x, ball_v_y = ball.v_y;
        //计算球运动直线方程
        float A, B, C;
        A = -1;
        B = ball_v_y / ball_v_x;
        C = ball_y - ball_x * ball_v_y / ball_v_x;
        //计算飞机到直线距离
        float dis = fabs((A * data->plane2.y + B * data->plane2.x + C) / pvp_ai2_vecMod(A, B));
        //计算垂点坐标
        float cross_x = (data->plane2.y - ball_y + ball_v_y / ball_v_x * ball_x + ball_v_x / ball_v_y * data->plane2.x)
                / (ball_v_x / ball_v_y + ball_v_y / ball_v_x);
        float cross_y = (ball_v_y / ball_v_x) * (cross_x - ball_x) + ball_y;
        //计算到垂点的时间
        float t = (cross_x - ball_x) / ball_v_x * 100;
        //反向运动或时间过久则忽略该球
        if (t < 0 || t > preTime)
        {
              continue;
          }

        //double disc=data->plane2.r + ball.r + 50;
        int index = 0;
        for(int i=0;i<data->ball_size;i++)
        {
              double y=data->plane2.y-ball.y;
              double x=data->plane2.x-ball.x;
              double dist=pvp_ai2_vecMod(x,y);
              if(dist>120)
                 index++;
        }
        if(index!=data->ball_size)
           return 1;

        //判断该球是否有威胁
        if (dis < data->plane2.r + ball.r + 10 && t < min_t)
        {
             //设置最紧迫威胁
            min_t = t;
            //向相反方向移动球半径的距离
            des_x = data->plane2.x +  ball.r * (data->plane2.x - cross_x)
                    / pvp_ai2_vecMod(data->plane2.x - cross_x, data->plane2.y - cross_y);
            des_y = data->plane2.y +  ball.r * (data->plane2.y - cross_y)
                    / pvp_ai2_vecMod(data->plane2.x - cross_x, data->plane2.y - cross_y);
            if (des_x < data->plane2.r || des_x > 2000 - data->plane2.r)
               return 1;
            else if (des_y < data->plane2.r || des_y > 1500 - data->plane2.r)
               return 1;
        }
    }

    //应对瞄准的保护
        int index2=0;
        for(int i=0;i<data->bullet1_size;i++)
        {
            float dis_ai1=pvp_ai2_vecMod(data->bullet1[i].x-data->plane2.x,data->bullet1[i].y-data->plane2.y);
            if(dis_ai1>120)
            {
                index2++;
            }
        }
        if(index2!=data->bullet1_size)
        {
            return 1;
        }
    //无危险则不开启护盾
    return 0;
}

//该函数判断是否已经移动到角落了
int pvp_ai2_toCorner(DataStruct*data)
{
    float dis=pvp_ai2_vecMod(data->plane2.x+data->plane2.r-2000,data->plane2.y-data->plane2.r);
    //float dis=pvp_ai2_vecMod(data->plane2.x+data->plane2.r-2000,data->plane2.y+data->plane2.r-1500);
    if(dis>190)
        return 1;
    else
        return 0;
}

//关键小球优先射击
int pvp_ai2_coreBall(DataStruct*data,int preTime=100)
{
    float min_t = INT_MAX;
    int pvp_ai2_coreBall=0;
    //预测每一个球的移动
    for (int i = 0; i < data->ball_size; i++)
    {
        //获取当前球的引用
        BallStruct &ball = data->ball[i];
        //获取当前球的坐标和速度
        float ball_x = ball.x, ball_y = ball.y, ball_v_x = ball.v_x, ball_v_y = ball.v_y;
        //计算球运动直线方程
        float A, B, C;
        A = -1;
        B = ball_v_y / ball_v_x;
        C = ball_y - ball_x * ball_v_y / ball_v_x;
        //计算飞机到直线距离
        float dis = fabs((A * data->plane2.y + B * data->plane2.x + C) / pvp_ai2_vecMod(A, B));
        //计算垂点坐标
        float cross_x = (data->plane2.y - ball_y + ball_v_y / ball_v_x * ball_x + ball_v_x / ball_v_y * data->plane2.x)
                / (ball_v_x / ball_v_y + ball_v_y / ball_v_x);
        //计算到垂点的时间
        float t = (cross_x - ball_x) / ball_v_x * 100;
        //反向运动或时间过久则忽略该球
        if (t < 0 || t > preTime)
        {
            continue;
        }
        //判断该球是否有威胁
        if (dis < data->plane2.r + ball.r + 10 && t < min_t)
        {
            //设置最紧迫威胁
            min_t = t;
            pvp_ai2_coreBall=i;
        }
    }
    //给定时间有威胁先射击威胁的
    if (min_t != INT_MAX)
    {
        return pvp_ai2_coreBall;
    }

    //给定时间内无危险不需要处理
    return 0;
}

void ai_pvp_ai2(DataStruct*data,KeyStruct*key){
    //默认不移动且恒发射子弹
    //默认飞机不开启护盾
    key->forward = false;
    key->rotate_left = false;
    key->rotate_right = false;
    key->shoot = true;
    key->shield = 1;

    static int moveFlag = 1, des_x, des_y;
    float x;
    float y;
    //int index = 0;

    //移动到角落
    if(moveFlag !=1||pvp_ai2_toCorner(data))
    {
        x=2000-data->plane2.r;
        y=data->plane2.r;
        moveFlag=pvp_ai2_moveTo(data, x, y, key->forward, key->rotate_left, key->rotate_right);
        return;
    }

    //判断是否开启护盾
    if(pvp_ai2_shieldUse(data, des_x, des_y))
    {
         key->shield = 1;
    }

/*
    //标志为0则正在移动或检查发现需要移动
        if (pvp_ai2_moveNeeded(data, des_x, des_y) || moveFlag == 0)
        {
            //进行移动并返回移动结果
            moveFlag = pvp_ai2_moveTo(data, des_x, des_y, key->forward, key->rotate_left, key->rotate_right);
            //返回标志为-1则发生错误
            if (moveFlag == -1)
            {
                std::cout << "移动发生错误" << std::endl;
            }
            //结束函数执行
            return;
        }
*/
    int k = pvp_ai2_coreBall(data);
    if(data->bullet1_size!=0){
           pvp_ai2_turnTo(data,data->plane1.x,data->plane1.y,key->rotate_left,key->rotate_right);
    }
    else if(k!=0 && data->ball_size && data->bullet1_size==0){
           pvp_ai2_AimBall(data, data->ball[k], key->rotate_left, key->rotate_right);
    }
    else if(k==0){
           pvp_ai2_AimBall(data, data->ball[pvp_ai2_selectBall(data)], key->rotate_left, key->rotate_right);
    }

}





